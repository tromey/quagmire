-*- text -*-

To do:

- program
    program prefix stuff from configure

- shared lib
    this needs porting, testing, and install fixes

x pkgconfig
    two bugs here:
    - make clean will re-build stuff first.  not sure how to fix this.
      I think it requires a gnu make extension
      MAKECMDGOALS does the wrong thing if the user runs 'make clean all'
    - each make will re-build the stamp file
      we might be able to fix this by persisting variables to an
      included .mk file.  then a difference from the persisted copy
      would trigger a rebuild  .. ?

    should be easy to specify packages per aggregate
    something like:

    PROGRAMS = zenity
    zenity_PACKAGES = gtk+-2.0 >= 2.9 libglade-2.0 libgnomecanvas-2.0 glib-2.0

    One general question here is whether to use magic variables, or to
    expose .quagmire/ config targets as part of the API.  The latter
    may be nice for optional packages?

- real configure stuff
    this is difficult because there are a lot of inter-dependencies
    for instance consider a common sequence of searching for a
    function in multiple libraries

    See the existing config.h support, which is currently pretty weak.
    For instance we can't search for a function in a library -- only
    in libc

    could use special syntax for this maybe
    or do library tests first, then function tests using the found
    libraries.

    handling libobjs ought to be pretty easy

  yacc/lex/c/c++/objc/asm/f77/f90

    Ideally we would have better support for adding on a new language
    than automake currently does.  For instance we could define
    some variables per language or per-lang-and-per-platform (for
    shared libraries)

x dependency tracking

    Ties into the language thing
    Probably no need for objc/gcj code (automake has it but it is
    doubtful that it is used -- can just assume gcc3)

  renamed object files

    how to handle things like a source in both a .a and .so?
    automake does all this renaming stuff
    one idea is to let the user specify a rename function
    it would compute the .o name
    we could even do fun things like rename the '%.c' in a static
    pattern rule

    a different idea is to support special syntax in _SOURCES.
    eg prog_SOURCES = output.o:input.c

    maybe language support is somehow related to this
    have a function that expands to a rule as needed
    then pass it `%.o,%.c', or whatever

  cross compilation

    An aggregate could have a flag indicating if it is for the host,
    target, or build machine... much nicer than auto*.  Or could just
    do it according to compiler choice -- very simple.

    Need to figure out where to put object files in these cases.
    Maybe always put them in subdirs or the like.  Or perhaps just
    define the problem away and make the user cope?

x install scripts/data/headers

    We want to group things by install dir and permissions.
    We could have a variable whose value is a list of variable names,
    but that seems ugly.  What else?

    we should find a faster way of installing than execing install
    once per file.  automake uses this approach and it scales poorly

x clean
x tags

x make dist

    Mostly works.  Much taken from Automake, though some things
    dropped.

x make distcheck

    Took it from Automake, works ok-ish.  A couple of FIXMEs.

x make check

    We have something very minimal here -- do it yourself

  info (& related targets: dvi, pdf, html, install-*)

    partly done, but some install targets not written, .ps/.html not
    done

  man & install-man (?)

    Use the automake implementations, more or less

  id?  gnu global?  lisp?  java?
  gettext


  we only required make 3.81 due to $(or)
  maybe we could relax this
  we could test a new automatic variable, like .VARIABLES, to see if
  we're using 3.80 (.FEATURES was added in 3.81)
  this probably doesn't matter since 3.81 was released in early 2006

================================================================
==
== Automake features we (probably) *don't* want

- ansi2knr

- subdirs?  so far we don't have them

- anything else?


================================================================
==
== GNU make wish list

gnu make doesn't have a nice way to find a .mk on a path
(without requiring the user to use -I)

see checkfunc.mk -- would be nice to have a built-in 'tr' function
perhaps a builtin regsub too, for depcomp stuff
or maybe an md5 or url-encoding primitive

Better syntax would make it nicer to let users use functions instead of
the current approach.

right now 'make clean' will happily re-run pkg-config

functions sure would be clearer and easier to modify with named
arguments.
